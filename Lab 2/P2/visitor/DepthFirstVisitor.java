//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   String currentClass;
   String currentMethod;
   String currentMethodType;
   String currentVarType;
   String currentVarName;
   String superClass;
   int currentWhateverType;
   String currentWhateverTypeString;
   Boolean inMethod;
   int passIndex;
   String ScopeClass;
   String ScopeMethod;
   String ExprRetType;
   String PrimaryExpressionType;
   Boolean IdentifierIsPrimaryExpression;
   Boolean PrimaryExpressionIsExpression;
   String AllocatedClass;
   ArrayList<String> MethodParameters = new ArrayList<String>();
   public class Var
   {
      public String VarID;
      public String retType;
      public Var(String Name, String Type)
      {
         this.retType = Type;
         this.VarID = Name;
      }
      public String getID()
      {
         return this.VarID;
      }
      public String getType()
      {
         return this.retType;
      }
   }

   public class Method
   {
      public String MethodID;
      public String retType;
      public String parentClass;
      public HashMap<String, Var> variables = new HashMap<String, Var>();
      public ArrayList<Var> parameters = new ArrayList<Var>();

      public Method(String Name, String Type)
      {
         this.retType = Type;
         this.MethodID = Name;
      }

      public String getID()
      {
         return this.MethodID;
      }
      public String getType()
      {
         return this.retType;
      }
      public String getParentClass()
      {
         return this.parentClass;
      }
      public HashMap<String, Var> getAllVariables()
      {
         return this.variables;
      }
      public Var getVariable(String Name)
      {
         return this.variables.get(Name);
      }
      public ArrayList<Var> getAllParameters()
      {
         return this.parameters;
      }
      public Var getnParameter(int n)
      {
         if(n>=0 && n<this.parameters.size())
         {
            return parameters.get(n);
         }
         return null;
      }
      public void addParameter(Var x)
      {
         for(int i=0; i<this.parameters.size(); i++)
         {
            if(this.parameters.get(i).getID() == x.getID())
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
         this.parameters.add(x);
      }
      public void addVariable(String Name, Var x)
      {
         for(int i=0; i<this.parameters.size(); i++)
         {
            if(this.parameters.get(i).getID() == Name)
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
         if(this.variables.containsKey(Name))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         this.variables.put(Name, x);
      }
   }

   public class ClassDetail
   {
      String ClassID;
      HashMap<String, Method> methods = new HashMap<String, Method>();
      HashMap<String, Var> fields = new HashMap<String, Var>();
      
      public ClassDetail(String Name)
      {
         this.ClassID = Name;
      }
      public String getID()
      {
         return this.ClassID;
      }
      public HashMap<String, Var> getAllFields()
      {
         return this.fields;
      } 
      public HashMap<String, Method> getAllMethod()
      {
         return this.methods;
      }
      public Method getMethod(String ID)
      {
         if(this.methods.containsKey(ID))
         {
            return this.methods.get(ID);
         }
         return null;
      }
      public Var getField(String Name)
      {
         if(this.fields.containsKey(Name))
         {
            return this.fields.get(Name);
         }
         return null;
      }
      public void addField(String Name, Var x)
      {
         if(this.fields.containsKey(Name))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         this.fields.put(Name, x);
      }
      public void addMethod(String Name, Method x)
      {
         if(this.methods.containsKey(Name))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         this.methods.put(Name, x);
      }
   }

   public class SymbolTable
   {
      HashMap<String, ClassDetail> classes = new HashMap<String, ClassDetail>();
      HashMap<String, String> inheritance = new HashMap<String, String>();

      public ClassDetail getClass(String Name)
      {
         if(this.classes.containsKey(Name))
         {
            return this.classes.get(Name);
         }
         return null;
      }
      public void addClass(String Name, ClassDetail x)
      {
         if(this.classes.containsKey(Name))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         this.classes.put(Name, x);
      }
      public String getSuperClass(String DerivedClass)
      {
         if(this.inheritance.containsKey(DerivedClass))
         {
            return this.inheritance.get(DerivedClass);
         }
         return null;
      }
      public void addInheritanceRelation(String DerivedClass, String SuperClass)
      {
         if(this.inheritance.containsKey(DerivedClass))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         this.inheritance.put(DerivedClass, SuperClass);
      }
      public boolean isAncestor(String AncestorClass, String DerivedClass)
      {
         if(this.inheritance.get(DerivedClass)==null)
         {
            return false;
         }
         if(this.inheritance.get(DerivedClass)==AncestorClass)
         {
            return true;
         }
         return isAncestor(AncestorClass, this.inheritance.get(DerivedClass));
      }
   }

   SymbolTable table = new SymbolTable();

   public class Checkers
   {
      public boolean ValidInhertianceChecker()
      {
         for(HashMap.Entry<String, String> entry : table.inheritance.entrySet())
         {
            if(table.getClass(entry.getValue())==null)
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
         }
         return true;
      }

      public boolean NoCyclicInhertianceChecker()
      {
         for(HashMap.Entry<String, ClassDetail> entry : table.classes.entrySet())
         {
            if(table.isAncestor(entry.getKey(), entry.getKey()))
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
         return true;
      }

      public Var findIdentifier(String Name, String ScopeClass, String ScopeMethod)
      {
         ClassDetail thisClassDetail = table.getClass(ScopeClass);
         Method thisMethod = null;
         if (ScopeMethod!=null)
         {
            thisMethod = thisClassDetail.getMethod(ScopeMethod);
         }
         if(thisMethod != null)
         {
            if(thisMethod.getVariable(Name)!=null)
            {
               return thisMethod.getVariable(Name);
            }
            for(int i=0; i<thisMethod.getAllParameters().size(); i++)
            {
               if(thisMethod.getnParameter(i).getID()==Name)
               {
                  return thisMethod.getnParameter(i);
               }
            }
         }
         ClassDetail tempScopeClass = thisClassDetail;
         while(tempScopeClass!=null)
         {
            if(tempScopeClass.getField(Name)!=null)
            {
               return tempScopeClass.getField(Name);
            }
            else
            {
               String Super = table.getSuperClass(tempScopeClass.getID());
               tempScopeClass = table.getClass(Super);
            }
         }
         System.out.println("Symbol not found");
         System.exit(0);
         return null;
      }

      public boolean ValidTypeParameter(String Type1, String Type2)
      {
         if(Type1=="Integer" || Type1 == "Boolean" || Type1 == "Array")
         {
            return Type2==Type1;
         }
         if(table.getClass(Type2)==null || table.getClass(Type1)==null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
            return false;
         }
         if(Type1==Type2)
         {
            return true;
         }
         return table.isAncestor(Type2, Type1);
      }
      public void AllValidTypes()
      {
         for(HashMap.Entry<String, ClassDetail> entry : table.classes.entrySet())
         {
            ClassDetail thisClass = entry.getValue();
            for(HashMap.Entry<String, Var> field : thisClass.getAllFields().entrySet())
            {
               String type = field.getValue().getType();
               if(type=="Integer" || type == "Array" || type == "Boolean")
               {
                  ;
               }
               else if(table.getClass(type)!=null)
               {
                  ;
               }
               else
               {
                  System.out.println("Symbol not found");
                  System.exit(0);
               }
            }
            for(HashMap.Entry<String, Method> method : thisClass.getAllMethod().entrySet())
            {
               String methodtype = method.getValue().getType();
               if(methodtype=="Integer" || methodtype == "Array" || methodtype == "Boolean" || methodtype == "void")
               {
                  ;
               }
               else if(table.getClass(methodtype)!=null)
               {
                  ;
               }
               else
               {
                  System.out.println("Symbol not found");
                  System.exit(0);
               }
               for(HashMap.Entry<String, Var> variables : method.getValue().getAllVariables().entrySet())
               {
                  String type = variables.getValue().getType();
                  if(type=="Integer" || type == "Array" || type == "Boolean")
                  {
                     ;
                  }
                  else if(table.getClass(type)!=null)
                  {
                     ;
                  }
                  else
                  {
                     System.out.println("Symbol not found");
                     System.exit(0);
                  }
               }
               for(int i=0; i<method.getValue().getAllParameters().size(); i++)
               {
                  String type = method.getValue().getAllParameters().get(i).getType();
                  if(type=="Integer" || type == "Array" || type == "Boolean")
                  {
                     ;
                  }
                  else if(table.getClass(type)!=null)
                  {
                     ;
                  }
                  else
                  {
                     System.out.println("Symbol not found");
                     System.exit(0);
                  }
               }
            }
         }
      }
      public void OverLoading()
      {
         for(HashMap.Entry<String, ClassDetail> entry : table.classes.entrySet())
         {
            ClassDetail thisClass = entry.getValue();
            for(HashMap.Entry<String, Method> fieldEntry : thisClass.getAllMethod().entrySet())
            {
               Method thisMethod = fieldEntry.getValue();
               ClassDetail tempClass = table.getClass(table.getSuperClass(thisClass.getID()));
               while(tempClass!=null)
               {
                  for(HashMap.Entry<String, Method> tempMethod : tempClass.getAllMethod().entrySet())
                  {
                     Method compareMethod = tempMethod.getValue();
                     if(compareMethod.getID() == thisMethod.getID())
                     {
                        //compareMethod can have acnestor type of thismethod's type
                        if(!ValidTypeParameter(thisMethod.getType(), compareMethod.getType()))
                        {
                           System.out.println("Type error");
                           System.exit(0);
                        }
                        if(compareMethod.getAllParameters().size() != thisMethod.getAllParameters().size())
                        {
                           System.out.println("Type error");
                           System.exit(0);
                        }
                        for(int i=0; i<compareMethod.getAllParameters().size(); i++)
                        {
                           if(compareMethod.getnParameter(i).getType() != thisMethod.getnParameter(i).getType())
                           {
                              System.out.println("Type error");
                              System.exit(0);
                           }
                        }
                     }
                  }
                  tempClass = table.getClass(table.getSuperClass(tempClass.getID()));
               }
            }
         }
         
      }
   }

   Checkers finalCheck = new Checkers();
   public DepthFirstVisitor(int visitNum)
   {
      passIndex = visitNum;
      currentClass = null;
      currentMethod = null;
      currentMethodType = null;
      currentVarType = null;
      currentVarName = null;
      superClass = null;
      currentWhateverType = -1;
      currentWhateverTypeString = null;
      inMethod = null;
      ScopeClass = null;
      ScopeMethod = null;
      ExprRetType = null;
      PrimaryExpressionType = null;
      IdentifierIsPrimaryExpression = false;
      AllocatedClass = null;
      PrimaryExpressionIsExpression = false;
   }
   
   public void setPassIndex(int num)
   {
      passIndex = num;
      currentClass = null;
      currentMethod = null;
      currentMethodType = null;
      currentVarType = null;
      currentVarName = null;
      superClass = null;
      currentWhateverType = -1;
      currentWhateverTypeString = null;
      inMethod = null;
      ScopeClass = null;
      ScopeMethod = null;
      ExprRetType = null;
      PrimaryExpressionType = null;
      IdentifierIsPrimaryExpression = false;
      AllocatedClass = null;
      PrimaryExpressionIsExpression = false;
   }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public void visit(Goal n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==1)
      {
         finalCheck.ValidInhertianceChecker();
         finalCheck.NoCyclicInhertianceChecker();
         finalCheck.AllValidTypes();
         finalCheck.OverLoading();
      }
      if(passIndex==2)
      {
         System.out.println("Program type checked successfully");
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public void visit(MainClass n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if(passIndex==1) {currentClass = n.f1.f0.tokenImage;}
      else {ScopeClass = n.f1.f0.tokenImage;}
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      if(passIndex==1) {currentMethod = "main";}
      else{ ScopeMethod = "main";}
      if(passIndex==1) {currentMethodType = "void";}
      n.f7.accept(this);
      n.f8.accept(this);
      if(passIndex==1) {currentVarType = "Array";}
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      if(passIndex==1){ currentVarName = n.f11.f0.tokenImage;}
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      if(passIndex==1)
      {
         table.addClass(currentClass, new ClassDetail(currentClass));
         ClassDetail thisclass = table.getClass(currentClass);
         if(thisclass==null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         thisclass.addMethod("main", new Method("main", "void"));
         Method mainMethod = thisclass.getMethod("main");
         if(mainMethod==null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         mainMethod.addParameter(new Var(currentVarName, currentVarType));
      }
      //Deal with string array
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public void visit(TypeDeclaration n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public void visit(ClassDeclaration n) {
      if(passIndex==1) {inMethod = false;}
      n.f0.accept(this);
      n.f1.accept(this);
      if(passIndex==1)
      {
         currentClass = n.f1.f0.tokenImage;
         table.addClass(currentClass, new ClassDetail(currentClass));
      }
      n.f2.accept(this);
      if(passIndex==2)
      {
         ScopeClass = n.f1.f0.tokenImage;
      }
      n.f3.accept(this);
      if(passIndex==1) {inMethod = true;}
      n.f4.accept(this);
      n.f5.accept(this);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public void visit(ClassExtendsDeclaration n) {
      if(passIndex==1) {inMethod = false;}
      n.f0.accept(this);
      n.f1.accept(this);
      if(passIndex==1) {currentClass = n.f1.f0.tokenImage;}
      n.f2.accept(this);
      n.f3.accept(this);
      if(passIndex==1)
      {
         superClass = n.f3.f0.tokenImage;
         table.addClass(currentClass, new ClassDetail(currentClass));
         table.addInheritanceRelation(currentClass, superClass);
      }
      if(passIndex==2)
      {
         ScopeClass = n.f1.f0.tokenImage;
      }
      n.f4.accept(this);
      n.f5.accept(this);
      if(passIndex==1) {inMethod = true;}
      n.f6.accept(this);
      n.f7.accept(this);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==1)
      {
         currentVarName = n.f1.f0.tokenImage;
         if(currentWhateverType==0)
         {
            currentVarType = "Array";
         }
         else if(currentWhateverType == 1)
         {
            currentVarType = "Boolean";
         }
         else if(currentWhateverType == 2)
         {
            currentVarType = "Integer";
         }
         else
         {
            currentVarType = currentWhateverTypeString;         
         }
         if(inMethod)
         {
            ClassDetail thisClassDetail = table.getClass(currentClass);
            if(thisClassDetail==null)
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
            Method thisMethod = thisClassDetail.getMethod(currentMethod);
            if(thisMethod==null)
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
            thisMethod.addVariable(currentVarName, new Var(currentVarName, currentVarType));
         }
         else
         {
            ClassDetail thisClassDetail = table.getClass(currentClass);
            if(thisClassDetail==null)
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
            thisClassDetail.addField(currentVarName, new Var(currentVarName, currentVarType));
         }
      }
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public void visit(MethodDeclaration n) {
      if(passIndex==1) inMethod = true;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==1)
      {
         currentMethod = n.f2.f0.tokenImage;
         if(currentWhateverType==0)
         {
            currentMethodType = "Array";
         }
         else if(currentWhateverType == 1)
         {
            currentMethodType = "Boolean";
         }
         else if(currentWhateverType == 2)
         {
            currentMethodType = "Integer";
         }
         else
         {
            currentMethodType = currentWhateverTypeString;
         }
         ClassDetail thisClassDetail = table.getClass(currentClass);
         if(thisClassDetail==null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         thisClassDetail.addMethod(currentMethod, new Method(currentMethod, currentMethodType));
      }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      if(passIndex==2)
      {
         ScopeMethod = n.f2.f0.tokenImage;
      }
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      if(passIndex==2)
      {
         if(!(finalCheck.ValidTypeParameter(ExprRetType, table.getClass(ScopeClass).getMethod(ScopeMethod).getType())))
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f11.accept(this);
      n.f12.accept(this);
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public void visit(FormalParameterList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public void visit(FormalParameter n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if(passIndex==1)
      {
         currentVarName = n.f1.f0.tokenImage;
         if(currentWhateverType==0)
         {
            currentVarType = "Array";
         }
         else if(currentWhateverType == 1)
         {
            currentVarType = "Boolean";
         }
         else if(currentWhateverType == 2)
         {
            currentVarType = "Integer";
         }
         else
         {
            currentVarType = currentWhateverTypeString;         
         }
         if(inMethod)
         {
            ClassDetail thisClassDetail = table.getClass(currentClass);
            if(thisClassDetail==null)
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
            Method thisMethod = thisClassDetail.getMethod(currentMethod);
            if(thisMethod==null)
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
            thisMethod.addParameter(new Var(currentVarName, currentVarType));
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public void visit(FormalParameterRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public void visit(Type n) { 
      if(passIndex==1) currentWhateverType = 3;
      n.f0.accept(this);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public void visit(ArrayType n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==1) currentWhateverType = 0;
   }

   /**
    * f0 -> "boolean"
    */
   public void visit(BooleanType n) {
      n.f0.accept(this);
      if(passIndex==1) currentWhateverType = 1;
   }

   /**
    * f0 -> "int"
    */
   public void visit(IntegerType n) {
      n.f0.accept(this);
      if(passIndex == 1) currentWhateverType = 2;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public void visit(Statement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public void visit(Block n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public void visit(AssignmentStatement n) {
      Var thisVariableVar = null;
      n.f0.accept(this);
      if(passIndex==2)
      {
         thisVariableVar = finalCheck.findIdentifier(n.f0.f0.tokenImage, ScopeClass, ScopeMethod);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if(passIndex==2)
      {
         if(finalCheck.ValidTypeParameter(ExprRetType, thisVariableVar.getType()))
         {
            ;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public void visit(ArrayAssignmentStatement n) {
      Var thisVariableVar = null;
      n.f0.accept(this);
      if(passIndex==2)
      {
         thisVariableVar = finalCheck.findIdentifier(n.f0.f0.tokenImage, ScopeClass, ScopeMethod);
         if(thisVariableVar.getType()!="Array")
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && ExprRetType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      if(passIndex==2 && ExprRetType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f6.accept(this);
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public void visit(IfStatement n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(IfthenStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && ExprRetType!="Boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public void visit(IfthenElseStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && ExprRetType!="Boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(WhileStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && ExprRetType!="Boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public void visit(DoStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      if(passIndex==2 && ExprRetType!="Boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f5.accept(this);
      n.f6.accept(this);
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public void visit(PrintStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && ExprRetType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public void visit(Expression n) {
      PrimaryExpressionIsExpression = true;
      n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public void visit(AndExpression n) {
      PrimaryExpressionIsExpression = false;
      n.f0.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      ExprRetType = "Boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public void visit(OrExpression n) {
      PrimaryExpressionIsExpression = false;
      n.f0.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Boolean")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      ExprRetType = "Boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public void visit(CompareExpression n) {
      PrimaryExpressionIsExpression = false;
      n.f0.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      if(passIndex==2)ExprRetType = "Boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public void visit(neqExpression n) {
      PrimaryExpressionIsExpression = false;
      String Type1 =  null;
      String Type2 =  null;
      n.f0.accept(this);
      Type1 = PrimaryExpressionType;
      n.f1.accept(this);
      n.f2.accept(this);
      Type2 = PrimaryExpressionType;
      if(passIndex==2)
      {
         if(Type1=="Integer" || Type1 == "Boolean" || Type1 == "Array")
         {
            if(Type2!=Type1)
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
         else if(table.getClass(Type2)==null || table.getClass(Type1)==null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         else if(Type1==Type2)
         {
            ;
         }
         else if(table.isAncestor(Type2, Type1) || table.isAncestor(Type1, Type2))
         {
            ;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      if(passIndex==2) ExprRetType = "Boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public void visit(AddExpression n) {
      PrimaryExpressionIsExpression = false;
      n.f0.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      if(passIndex==2) ExprRetType = "Integer";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public void visit(MinusExpression n) {
      PrimaryExpressionIsExpression = false;
      n.f0.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      if(passIndex==2)ExprRetType = "Integer";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public void visit(TimesExpression n) {
      PrimaryExpressionIsExpression = false;
      n.f0.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      if(passIndex==2)ExprRetType = "Integer";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public void visit(DivExpression n) {
      PrimaryExpressionIsExpression = false;
      n.f0.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      if(passIndex==2)ExprRetType = "Integer";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public void visit(ArrayLookup n) {
      PrimaryExpressionIsExpression = false;
      n.f0.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Array")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Integer")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this);
      if(passIndex==2)ExprRetType = "Integer";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public void visit(ArrayLength n) {
      PrimaryExpressionIsExpression = false;
      n.f0.accept(this);
      if(passIndex==2 && PrimaryExpressionType!="Array")
      {
         System.out.println("Type error");
         System.exit(0);
      }
      if(passIndex==2 && PrimaryExpressionType=="Array")
      {
         if(ScopeMethod=="main")
         {
            ClassDetail thisClassDetail = table.getClass(ScopeClass);
            Method mainMethod = thisClassDetail.getMethod(ScopeMethod);
            if(mainMethod.getType()=="void")
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2)ExprRetType = "Integer";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public void visit(MessageSend n) {
      PrimaryExpressionIsExpression = false;
      ArrayList<String> TempParameters = null;
      ClassDetail thisClassDetail = null;
      ClassDetail tempClassDetail = null;
      String MethodName = null;
      n.f0.accept(this);
      if(passIndex==2)
      {
         if(table.getClass(PrimaryExpressionType)==null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         else if(table.getClass(PrimaryExpressionType)!=null)
         {
            thisClassDetail = table.getClass(PrimaryExpressionType);
         }
      }
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2){
         tempClassDetail = thisClassDetail;
         MethodName = n.f2.f0.tokenImage;
         while(tempClassDetail != (null))
         {
            if(tempClassDetail.getMethod(MethodName)==(null))
            {
               tempClassDetail = table.getClass(table.getSuperClass(tempClassDetail.getID()));
            }
            else
            {
               break;
            }
         }
         if(tempClassDetail == (null))
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      n.f3.accept(this);
      if(passIndex==2)
      {
         TempParameters = MethodParameters;
         MethodParameters = new ArrayList<String>();
      }
      n.f4.accept(this);
      if(passIndex==2)
      {
         Method thisMethod = tempClassDetail.getMethod(MethodName);
         if(thisMethod.getAllParameters().size()!=MethodParameters.size())
         {
            System.out.println("Type error");
            System.exit(0);
         }
         for(int i=0; i<MethodParameters.size(); i++)
         {
            if(!(finalCheck.ValidTypeParameter(MethodParameters.get(i), thisMethod.getnParameter(i).getType())))
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
      if(passIndex==2)
      {
         ExprRetType = tempClassDetail.getMethod(MethodName).getType();
         MethodParameters = TempParameters;
      }
      n.f5.accept(this);
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public void visit(ExpressionList n) {
      n.f0.accept(this);
      if(passIndex==2)
      {
         MethodParameters.add(ExprRetType);
      }
      n.f1.accept(this);
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public void visit(ExpressionRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if(passIndex==2)
      {
         MethodParameters.add(ExprRetType);
      }
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public void visit(PrimaryExpression n) {
      IdentifierIsPrimaryExpression = true;
      n.f0.accept(this);
      if(PrimaryExpressionIsExpression && passIndex==2)
      {
         ExprRetType = PrimaryExpressionType;
      }
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n) {
      n.f0.accept(this);
      if(passIndex==2)
      {
         PrimaryExpressionType = "Integer";
         IdentifierIsPrimaryExpression = false;
      }
   }

   /**
    * f0 -> "true"
    */
   public void visit(TrueLiteral n) {
      n.f0.accept(this);
      if(passIndex==2)
      {
         PrimaryExpressionType = "Boolean";
         IdentifierIsPrimaryExpression = false;
      }
   }

   /**
    * f0 -> "false"
    */
   public void visit(FalseLiteral n) {
      n.f0.accept(this);
      if(passIndex==2)
      {
         PrimaryExpressionType = "Boolean";
         IdentifierIsPrimaryExpression = false;
      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n) {
      n.f0.accept(this);
      if(passIndex==1)
      {
         if(currentWhateverType==3)
         {
            currentWhateverType = -1;
            if(table.classes.containsKey(n.f0.tokenImage))
            {
               currentWhateverTypeString = n.f0.tokenImage;
            }
            else
            {
               currentWhateverTypeString = n.f0.tokenImage;
            }
         }
      }
      if(passIndex==2)
      {
         if(IdentifierIsPrimaryExpression)
         {
            IdentifierIsPrimaryExpression = false;
            PrimaryExpressionType = finalCheck.findIdentifier(n.f0.tokenImage, ScopeClass, ScopeMethod).getType();
         }
      }
   }

   /**
    * f0 -> "this"
    */
   public void visit(ThisExpression n) {
      n.f0.accept(this);
      if(passIndex==2)
      {
         PrimaryExpressionType = ScopeClass;
         IdentifierIsPrimaryExpression = false;
      }
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public void visit(ArrayAllocationExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if(passIndex==2)
      {
         if(ExprRetType!="Integer")
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f4.accept(this);
      if(passIndex==2)
      {
         PrimaryExpressionType = "Array";
         if(PrimaryExpressionIsExpression)
         {
            PrimaryExpressionIsExpression = false;
            ExprRetType = PrimaryExpressionType;
         }
         IdentifierIsPrimaryExpression = false;
      }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public void visit(AllocationExpression n) {
      IdentifierIsPrimaryExpression = false;
      n.f0.accept(this);
      n.f1.accept(this);
      if(passIndex==2)
      {
         AllocatedClass = n.f1.f0.tokenImage;
         if(table.getClass(AllocatedClass)==null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
      }
      n.f2.accept(this);
      n.f3.accept(this);
      if(passIndex==2)
      {
         PrimaryExpressionType = AllocatedClass;
         if(PrimaryExpressionIsExpression)
         {
            PrimaryExpressionIsExpression = false;
            ExprRetType = PrimaryExpressionType;
         }
      }
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public void visit(NotExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if(passIndex==2)
      {
         PrimaryExpressionType = "Boolean";
         if(PrimaryExpressionIsExpression)
         {
            PrimaryExpressionIsExpression = false;
            ExprRetType = PrimaryExpressionType;
         }
         IdentifierIsPrimaryExpression = false;
      }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public void visit(BracketExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(passIndex==2)
      {
         PrimaryExpressionType = ExprRetType;
         IdentifierIsPrimaryExpression = false;
         if(PrimaryExpressionIsExpression)
         {
            PrimaryExpressionIsExpression = false;
            ExprRetType = PrimaryExpressionType;
         }
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public void visit(IdentifierList n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }
   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public void visit(IdentifierRest n) {
      n.f0.accept(this);
      n.f1.accept(this);
   }
}