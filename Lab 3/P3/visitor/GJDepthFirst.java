//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   //HLOAD a b i : a = b[i];
   //HSTORE a i b : a[i] = b;
   //CJUMP SimpleExp Label : If SimpleExp then jump to label else continue;
   class TEMPVAR
   {
      String TEMP = "TEMP";
      public int counter;
      String retType;
      public void SetCount(int newCount)
      {
         counter = newCount;
      }
      public TEMPVAR(int count, String type)
      {
         counter = count;
         retType = type;
      }
   }
   int IfthenElseCounter = 0;
   External table;
   boolean DEBUG1 = false;
   boolean DEBUG2 = false;
   boolean DEBUG3 = false;
   boolean DEBUG4 = false;
   int tempCounter = 0;
   int labelCounter = 0;
   String LABEL = "L";
   String TEMP = "TEMP";
   String MAIN = "MAIN";
   String END = "END";
   String NOOP = "NOOP";
   String ERROR = "ERROR";
   String CJUMP = "CJUMP";
   String JUMP = "JUMP";
   String HSTORE = "HSTORE";
   String HLOAD = "HLOAD";
   String MOVE = "MOVE";
   String PRINT = "PRINT";
   String BEGIN = "BEGIN";
   String RETURN = "RETURN";
   String CALL = "CALL";
   String HALLOCATE = "HALLOCATE";
   String OP1 = "LE";
   String OP2 = "NE";
   String OP3 = "PLUS";
   String OP4 = "MINUS";
   String OP5 = "TIMES";
   String OP6 = "DIV";   
   String LB = "[", RB = "]", SPACE = " ";
   public int passNum = 0;
   String CurrentClass = null;
   String CurrentMethod = null;
   HashMap<String, TEMPVAR> IdentifierToTEMP = new HashMap<String, TEMPVAR>();
   HashMap<TEMPVAR, External.ObjectStructure> TEMP2Object = new HashMap<TEMPVAR, External.ObjectStructure>();
   ArrayList<TEMPVAR> Params = new ArrayList<TEMPVAR>();
   HashMap<String, External.VarTypeDeclaration> VariableTypes = new HashMap<String, External.VarTypeDeclaration>();
   public GJDepthFirst (External Intable)
   {
      table = Intable;
   }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         table.DoAllDFS();
         table.fillMap();
      }
      if(passNum==2)
      {
         table.DoAllDFS();
         table.fillMap();
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         CurrentClass = (String) n.f1.accept(this, argu);
         table.ST.addClass(CurrentClass, table.new ClassDetail(CurrentClass));
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         CurrentMethod = "main";
         External.ClassDetail thisClass = table.ST.getClass(CurrentClass);
         thisClass.addMethod(CurrentMethod, table.new Method(CurrentMethod, "void"));
         External.Method thisMethod = thisClass.getMethod(CurrentMethod);
         thisMethod.parentClass = CurrentClass;
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         String tempArg = null;
         tempArg = (String) n.f11.accept(this, argu);
         if(passNum==1)
         {
            External.Var param = table.new Var(tempArg, "String[]");
            thisMethod.addParameter(param);
         }
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
      }
      if(passNum==2)
      {
         tempCounter=0;
         labelCounter=1;
         n.f0.accept(this, argu);
         CurrentClass = (String)n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         CurrentMethod = "main";
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         String temp = null;
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         System.out.println(MAIN);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         System.out.println(END);
         tempCounter=0;
         labelCounter=1;
         IdentifierToTEMP.clear();
         TEMP2Object.clear();
         CurrentMethod = null;
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      CurrentClass = (String) n.f1.accept(this, argu);
      if(passNum==1)
      {
         table.ST.addClass(CurrentClass, table.new ClassDetail(CurrentClass));
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         CurrentClass = (String) n.f1.accept(this, argu);
         table.ST.addClass(CurrentClass, table.new ClassDetail(CurrentClass));
         String ParentClass = null;
         n.f2.accept(this, argu);
         ParentClass = (String) n.f3.accept(this, argu);
         table.ST.addInheritanceRelation(CurrentClass, ParentClass);
         table.ST.addEdge(ParentClass, CurrentClass);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
      }
      if(passNum==2)
      {
         n.f0.accept(this, argu);
         CurrentClass = (String) n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         String type = null, id = null;
         type = (String) (n.f0.accept(this, argu));
         id = (String) (n.f1.accept(this, argu));
         n.f2.accept(this, argu);
         External.ClassDetail thisClass = table.ST.getClass(CurrentClass);
         External.Method thisMethod = thisClass.getMethod(CurrentMethod);
         External.Var param = table.new Var(id, type);
         if(thisMethod!=null)
         {
            thisMethod.addVariable(id, param);
         } 
         else
         {
            thisClass.addField(id, param);
         }
      }
      if(passNum==2 && CurrentMethod!=null)
      {
         String type = null;
         String id = null;
         type = (String)n.f0.accept(this, argu);
         id = (String)n.f1.accept(this, argu);
         if(DEBUG3)
         {
            System.out.println("AAA " + type + id);
         }
         n.f2.accept(this, argu);
         System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + 0);
         IdentifierToTEMP.put(id, new TEMPVAR(tempCounter, type));
         tempCounter++;
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         String type = null;
         type = (String) n.f1.accept(this, argu);
         CurrentMethod = (String) n.f2.accept(this, argu);
         if(passNum==1)
         {
            External.ClassDetail thisClass = table.ST.getClass(CurrentClass);
            thisClass.addMethod(CurrentMethod, table.new Method(CurrentMethod, type));
            External.Method thisMethod = thisClass.getMethod(CurrentMethod);
            thisMethod.parentClass = CurrentClass;
         }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         CurrentMethod = null;
      }
      if(passNum==2)
      {
         tempCounter = 0;
         labelCounter = 1;
         IdentifierToTEMP.clear();
         TEMP2Object.clear();
         External.ClassDetail thisClass = table.ST.getClass(CurrentClass);
         External.ObjectStructure thisObjectStructure = table.new ObjectStructure(thisClass.ClassID);
         thisObjectStructure.AssignField(thisClass.getAllFields());
         thisObjectStructure.AssignMethods(thisClass.getAllMethod());
         TEMPVAR thisTEMP = new TEMPVAR(0, CurrentClass);
         IdentifierToTEMP.put("this", thisTEMP);
         TEMP2Object.put(thisTEMP, thisObjectStructure);
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         CurrentMethod = (String) n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         External.Method thisMethod = thisClass.getMethod(CurrentMethod);
         tempCounter = 1+thisMethod.getAllParameters().size();
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         System.out.println(CurrentClass + "_" + CurrentMethod + SPACE + LB + (1+thisMethod.getAllParameters().size()) + RB);
         System.out.println(BEGIN);
         for(int i=0; i< thisMethod.getAllParameters().size(); i++)
         {
            IdentifierToTEMP.put(thisMethod.getnParameter(i).VarID, new TEMPVAR(i+1, thisMethod.getnParameter(i).retType));
         }
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         TEMPVAR t1 = null;
         t1 = (TEMPVAR)n.f10.accept(this, argu);
         System.out.println(RETURN + SPACE + TEMP + SPACE + t1.counter);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         System.out.println(END);
         tempCounter = 0;
         labelCounter = 1;
         CurrentMethod = null;
         IdentifierToTEMP.clear();
         TEMP2Object.clear();
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         String type = null, id = null;
         type = (String) (n.f0.accept(this, argu));
         id = (String) (n.f1.accept(this, argu));
         External.ClassDetail thisClass = table.ST.getClass(CurrentClass);
         External.Method thisMethod = thisClass.getMethod(CurrentMethod);
         External.Var param = table.new Var(id, type);
         thisMethod.addParameter(param);
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R) ("int[]");
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) ("int");
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      if(passNum==2)
      {
         String id = null;
         TEMPVAR exp = null;
         id = (String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         exp = (TEMPVAR)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         TEMPVAR lhs = IdentifierToTEMP.get(id);
         if(lhs!=null)
         {
            System.out.println(MOVE + SPACE + TEMP + SPACE + lhs.counter + SPACE + TEMP + SPACE + exp.counter);
         }
         else
         {
            External.ClassDetail thisClassDetail = table.ST.getClass(CurrentClass);
            int index = 0;
            ArrayList<External.Var> FieldsList = new ArrayList<>(thisClassDetail.getAllFields());
            Collections.reverse(FieldsList);
            for(int i=0; i<thisClassDetail.getAllFields().size(); i++)
            {
               if(FieldsList.get(i).VarID == id)
               {
                  index = i;
                  break;
               }
            }      
            index++;
            index *= 4;
            System.out.println(HSTORE + SPACE + TEMP + SPACE + 0 + SPACE + index + SPACE + TEMP + SPACE + exp.counter);
         }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      if(passNum==2)
      {
         TEMPVAR t1 = null;
         String id = null;
         //NEED TO SET t1
         TEMPVAR t2 = null;
         TEMPVAR t3 = null;
         id = (String)n.f0.accept(this, argu);
         t1 = IdentifierToTEMP.get(id); //Temp for the array
         n.f1.accept(this, argu);
         t2 = (TEMPVAR)n.f2.accept(this, argu); //Index's temp
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         t3 = (TEMPVAR)n.f5.accept(this, argu); //Expression
         n.f6.accept(this, argu);
         if(t1!=null)
         {
            int AdjustedIndex = tempCounter;
            int AdjustedOffset = tempCounter+1;
            int AdjustedSpace = tempCounter+2;
            tempCounter += 3;
            System.out.println(MOVE + SPACE + TEMP + SPACE + AdjustedIndex + SPACE + OP3 + SPACE + TEMP + SPACE + t2.counter + SPACE + 1);
            System.out.println(MOVE + SPACE + TEMP + SPACE + AdjustedOffset + SPACE + OP5 + SPACE + TEMP + SPACE + AdjustedIndex + SPACE + 4);
            System.out.println(MOVE + SPACE + TEMP + SPACE + AdjustedSpace + SPACE + OP3 + SPACE + TEMP + SPACE + t1.counter + SPACE + TEMP + SPACE + AdjustedOffset);
            System.out.println(HSTORE + SPACE + TEMP + SPACE + AdjustedSpace + SPACE + 0 + SPACE + TEMP + SPACE + t3.counter);
         }
         else
         {
            int array = tempCounter;
            int AdjustedIndex = tempCounter+1;
            int AdjustedOffset = tempCounter+2;
            int AdjustedSpace = tempCounter+3;
            tempCounter += 4;
            External.ClassDetail thisClassDetail = table.ST.getClass(CurrentClass);
            int index = 0;
            ArrayList<External.Var> FieldsList = new ArrayList<>(thisClassDetail.getAllFields());
            Collections.reverse(FieldsList);
            for(int i=0; i<thisClassDetail.getAllFields().size(); i++)
            {
               if(FieldsList.get(i).VarID == id)
               {
                  index = i;
                  break;
               }
            }      
            index++;
            index *= 4;
            System.out.println(HLOAD + SPACE + TEMP + SPACE + array + SPACE + TEMP + SPACE + 0 + SPACE + index);
            System.out.println(MOVE + SPACE + TEMP + SPACE + AdjustedIndex + SPACE + OP3 + SPACE + TEMP + SPACE + t2.counter + SPACE + 1);
            System.out.println(MOVE + SPACE + TEMP + SPACE + AdjustedOffset + SPACE + OP5 + SPACE + TEMP + SPACE + AdjustedIndex + SPACE + 4);
            System.out.println(MOVE + SPACE + TEMP + SPACE + AdjustedSpace + SPACE + OP3 + SPACE + TEMP + SPACE + array + SPACE + TEMP + SPACE + AdjustedOffset);
            System.out.println(HSTORE + SPACE + TEMP + SPACE + AdjustedSpace + SPACE + 0 + SPACE + TEMP + SPACE + t3.counter);
            System.out.println(HSTORE + SPACE + TEMP + SPACE + 0 + SPACE + index + SPACE + TEMP + SPACE + array);
         }
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      if(passNum==2)
      {
         TEMPVAR t1 = null;
         System.out.flush();
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int AfterIf = labelCounter;
         labelCounter += 1;
         t1 = (TEMPVAR) n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         System.out.println(CJUMP + SPACE + TEMP + SPACE + t1.counter + SPACE + "L" + AfterIf);
         n.f4.accept(this, argu);
         System.out.println("L"+AfterIf);
         System.out.println(NOOP);
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else
      {
         TEMPVAR t1 = null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int TrueIF = labelCounter;
         int GoInElse = labelCounter+1;
         int AfterIfElse = labelCounter+2;
         labelCounter += 3;
         t1 = (TEMPVAR) n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         System.out.println(CJUMP + SPACE + TEMP + SPACE + t1.counter + SPACE + "L" + GoInElse);
         System.out.println("L" + TrueIF);
         System.out.println(NOOP);
         n.f4.accept(this, argu);
         System.out.println(JUMP + SPACE + "L"+AfterIfElse);
         System.out.println("L"+GoInElse);
         System.out.println(NOOP);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         System.out.println("L"+AfterIfElse);
         System.out.println(NOOP);
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int StartLoop = labelCounter;
         int ExitLoop = labelCounter+1;
         labelCounter += 2;
         System.out.println("L"+StartLoop);
         System.out.println(NOOP);
         TEMPVAR t1 = (TEMPVAR) n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         System.out.println(CJUMP + SPACE + TEMP + SPACE + t1.counter + SPACE + "L"+ExitLoop);
         n.f4.accept(this, argu);
         System.out.println(JUMP + SPACE + "L"+StartLoop);
         System.out.println("L"+ExitLoop);
         System.out.println(NOOP);
      }
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else
      {
         int StartLoop = labelCounter;
         int ExitLoop = labelCounter+1;
         labelCounter += 2;
         System.out.println("L"+StartLoop);
         System.out.println(NOOP);
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         TEMPVAR t1 = (TEMPVAR)n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         System.out.println(CJUMP + SPACE + TEMP + SPACE + t1.counter + SPACE + "L"+ExitLoop);
         System.out.println(JUMP + SPACE + "L"+StartLoop);
         System.out.println(JUMP + SPACE + "L"+ExitLoop);
         System.out.println(NOOP);
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      if(passNum==2)
      {
         TEMPVAR t1 = null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         t1 = (TEMPVAR)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println(PRINT + SPACE + TEMP + SPACE + t1.counter);
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         TEMPVAR t1 = (TEMPVAR)n.f0.accept(this, argu);
         _ret = (R)t1;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         TEMPVAR t1=null, t2=null;
         t1 = (TEMPVAR) n.f0.accept(this, argu);
         int CheckT2 = labelCounter;
         int TrueExpression = labelCounter+2;
         int FalseExpression = labelCounter+1;
         int labelAfterAND = labelCounter+3;
         labelCounter += 4;
         int temp = tempCounter;
         tempCounter++;
         System.out.println(CJUMP + SPACE + TEMP + SPACE + t1.counter + SPACE + "L" + FalseExpression);
         System.out.println(JUMP + SPACE + "L" + CheckT2);
         System.out.println("L" + CheckT2);
         System.out.println(NOOP);
         n.f1.accept(this, argu);
         t2 = (TEMPVAR) n.f2.accept(this, argu);
         System.out.println(CJUMP + SPACE + TEMP + SPACE + t2.counter + SPACE + "L" + FalseExpression);
         System.out.println(JUMP + SPACE + "L" + TrueExpression);
         System.out.println("L" + FalseExpression);
         System.out.println(NOOP);
         System.out.println(MOVE + SPACE + TEMP + SPACE + temp + SPACE + 0);
         System.out.println(JUMP + SPACE + "L"+labelAfterAND);
         System.out.println("L" + TrueExpression);
         System.out.println(NOOP);
         System.out.println(MOVE + SPACE + TEMP + SPACE + temp + SPACE + 1);
         System.out.println(JUMP + SPACE + "L"+labelAfterAND);
         System.out.println("L" + labelAfterAND);
         System.out.println(NOOP);
         _ret = (R) (new TEMPVAR(temp, "boolean"));
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         TEMPVAR t1=null, t2=null;
         t1 = (TEMPVAR) n.f0.accept(this, argu);
         int CheckT2 = labelCounter;
         int TrueExpression = labelCounter+1;
         int FalseExpression = labelCounter+2;
         int labelAfterOR = labelCounter+3;
         labelCounter += 4;
         int temp = tempCounter;
         tempCounter++;
         System.out.println(CJUMP + SPACE + TEMP + SPACE + t1.counter + SPACE + "L" + CheckT2);
         System.out.println(JUMP + SPACE + "L" + TrueExpression);
         System.out.println("L" + CheckT2);
         System.out.println(NOOP);
         n.f1.accept(this, argu);
         t2 = (TEMPVAR) n.f2.accept(this, argu);
         System.out.println(CJUMP + SPACE + TEMP + SPACE + t2.counter + SPACE + "L" + FalseExpression);
         System.out.println(JUMP + SPACE + "L" + TrueExpression);
         System.out.println("L" + TrueExpression);
         System.out.println(NOOP);
         System.out.println(MOVE + SPACE + TEMP + SPACE + temp + SPACE + 1);
         System.out.println(JUMP + SPACE + "L"+labelAfterOR);
         System.out.println("L" + FalseExpression);
         System.out.println(NOOP);
         System.out.println(MOVE + SPACE + TEMP + SPACE + temp + SPACE + 0);
         System.out.println(JUMP + SPACE + "L"+labelAfterOR);
         System.out.println("L" + labelAfterOR);
         System.out.println(NOOP);
         _ret = (R) (new TEMPVAR(temp, "boolean"));
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      TEMPVAR t1, t2;
      t1 = (TEMPVAR) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2 = (TEMPVAR) n.f2.accept(this, argu);
      TEMPVAR t3 = new TEMPVAR(tempCounter, "boolean");
      System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + OP1 + SPACE + TEMP + SPACE + t1.counter + SPACE + TEMP + SPACE + t2.counter);
      tempCounter++;
      _ret = (R) t3;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      if(passNum==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      R _ret = null;
      TEMPVAR t1, t2;
      t1 = (TEMPVAR) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2 = (TEMPVAR) n.f2.accept(this, argu);
      TEMPVAR t3 = new TEMPVAR(tempCounter, "boolean");
      System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + OP2 + SPACE + TEMP + SPACE + t1.counter + SPACE + TEMP + SPACE + t2.counter);
      tempCounter++;
      _ret = (R) t3;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      if(passNum==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      R _ret = null;
      TEMPVAR t1, t2;
      t1 = (TEMPVAR) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2 = (TEMPVAR) n.f2.accept(this, argu);
      TEMPVAR t3 = new TEMPVAR(tempCounter, "int");
      System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + OP3 + SPACE + TEMP + SPACE + t1.counter + SPACE + TEMP + SPACE + t2.counter);
      tempCounter++;
      _ret = (R) t3;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      if(passNum==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      R _ret = null;
      TEMPVAR t1, t2;
      t1 = (TEMPVAR) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2 = (TEMPVAR) n.f2.accept(this, argu);
      TEMPVAR t3 = new TEMPVAR(tempCounter, "int");
      System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + OP4 + SPACE + TEMP + SPACE + t1.counter + SPACE + TEMP + SPACE + t2.counter);
      tempCounter++;
      _ret = (R) t3;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      TEMPVAR t1, t2;
      t1 = (TEMPVAR) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2 = (TEMPVAR) n.f2.accept(this, argu);
      TEMPVAR t3 = new TEMPVAR(tempCounter, "int");
      System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + OP5 + SPACE + TEMP + SPACE + t1.counter + SPACE + TEMP + SPACE + t2.counter);
      tempCounter++;
      _ret = (R) t3;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      if(passNum==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      R _ret = null;
      TEMPVAR t1, t2;
      t1 = (TEMPVAR) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2 = (TEMPVAR) n.f2.accept(this, argu);
      TEMPVAR t3 = new TEMPVAR(tempCounter, "int");
      System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + OP6 + SPACE + TEMP + SPACE + t1.counter + SPACE + TEMP + SPACE + t2.counter);
      tempCounter++;
      _ret = (R) t3;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else
      {
         TEMPVAR t1 = null, t2 = null;
         t1 = (TEMPVAR)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         t2 = (TEMPVAR)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         int AdjustedIndex = tempCounter; //Index + 1 is where the value is actually stored
         int AdjustedOffset = tempCounter+1;
         int AdjustedSpace = tempCounter+2;
         int ReturnValue = tempCounter+3;
         tempCounter += 4;
         System.out.println(MOVE + SPACE + TEMP + SPACE + AdjustedIndex + SPACE + OP3 + SPACE + TEMP + SPACE + t2.counter + SPACE + "1");
         System.out.println(MOVE + SPACE + TEMP + SPACE + AdjustedOffset + SPACE + OP5 + SPACE + TEMP + SPACE + AdjustedIndex + SPACE + "4");
         System.out.println(MOVE + SPACE + TEMP + SPACE + AdjustedSpace + SPACE + OP3 + SPACE + TEMP + SPACE + t1.counter + SPACE + TEMP + SPACE + AdjustedOffset);
         System.out.println(HLOAD + SPACE + TEMP + SPACE + ReturnValue + SPACE + TEMP + SPACE + AdjustedSpace + SPACE + 0);
         _ret = (R)(new TEMPVAR(ReturnValue, t1.retType));
         tempCounter++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(passNum==2)
      {
         TEMPVAR t1 = null;
         t1 = (TEMPVAR)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         System.out.println(HLOAD + SPACE + TEMP + SPACE + tempCounter + SPACE + TEMP + SPACE + t1.counter + SPACE + 0);
         _ret = (R)(new TEMPVAR(tempCounter, "int"));
         tempCounter++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
      }
      if(passNum==2)
      {
         TEMPVAR t1 = null;
         int indexOfFunc = 0;
         String FunName = null;
         t1 = (TEMPVAR)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         FunName = (String)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         External.ObjectStructure temp = table.ClassToObjectStructure.get(t1.retType); //Object Structure
         ArrayList<TEMPVAR> tempParams = new ArrayList<TEMPVAR>(Params);
         Params.clear();
         String retTypeOfFunc = null;
         for(int i=0; i<temp.getAllMethod().size(); i++)
         {
            if(temp.getAllMethod().get(i).MethodID==FunName)
            {
               indexOfFunc = i;
               retTypeOfFunc = temp.getAllMethod().get(i).retType;
               break;
            }
         }
         indexOfFunc *= 4; //This is used to find the function
         int newCounter = tempCounter; //This will make a copy of PrimaryExpression's Object Structure
         System.out.println(MOVE + SPACE + TEMP + SPACE + newCounter + SPACE + TEMP + SPACE + t1.counter);
         int VTable = tempCounter+1; //This is for VTable
         int FunctionIndexFromVTable = tempCounter+2; 
         int retFromCall = tempCounter+3;
         tempCounter += 4;
         System.out.println(HLOAD + SPACE + TEMP + SPACE + VTable + SPACE + TEMP + SPACE + newCounter + SPACE + 0); //Load vtable from Object Structure into VTable
         System.out.println(HLOAD + SPACE + TEMP + SPACE + FunctionIndexFromVTable + SPACE + TEMP + SPACE + VTable + SPACE + indexOfFunc); //Load the function into FunctionIndexFromtVTable
         n.f4.accept(this, argu);
         System.out.print(MOVE + SPACE + TEMP + SPACE + retFromCall + SPACE + CALL + SPACE + TEMP + SPACE + FunctionIndexFromVTable + " ( " + TEMP + SPACE + t1.counter ); //Call the method
         for(int i=0; i<Params.size(); i++)
         {
            System.out.print(SPACE + TEMP + SPACE + Params.get(i).counter);
         }
         n.f5.accept(this, argu);
         System.out.println(" ) ");
         Params = tempParams;
         if(DEBUG4)
         {
            System.out.println(FunName + " PARAMS : " + Params.size() + " TempPARAMS : " + tempParams.size());
         }
         _ret = (R)(new TEMPVAR(retFromCall, retTypeOfFunc));
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      if(passNum==2)
      {
         TEMPVAR t1 = (TEMPVAR)n.f0.accept(this, argu);
         Params.add(t1);
         n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      if(passNum==2)
      {
         n.f0.accept(this, argu);
         TEMPVAR t1 = (TEMPVAR)n.f1.accept(this, argu);
         Params.add(t1);
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
      }
      if(passNum==2)
      {
         TEMPVAR t1 = null;
         String t2 = null;
         R temp = n.f0.accept(this, argu);
         if(n.f0.which==3)
         {
            t2 = (String)(temp);
            t1 = IdentifierToTEMP.get(t2);
            if(t1==null)
            {
               String type = null;
               External.ClassDetail thisClassDetail = table.ST.getClass(CurrentClass);
               int index = 0;
               ArrayList<External.Var> FieldsList = new ArrayList<>(thisClassDetail.getAllFields());
               Collections.reverse(FieldsList);
               for(int i=0; i<thisClassDetail.getAllFields().size(); i++)
               {
                  if(FieldsList.get(i).VarID == t2)
                  {
                     index = i;
                     type = FieldsList.get(i).retType;
                     break;
                  }
               }      
               t1 = new TEMPVAR(tempCounter, type); //Field
               tempCounter++;
               if(DEBUG3)
               {
                  System.out.println("HII "+ t1.retType);
                  System.out.flush();
               }
               index++;
               index *= 4;
               System.out.println(HLOAD + SPACE + TEMP + SPACE + t1.counter + SPACE + TEMP + SPACE + 0 + SPACE + index);
            }
            _ret = (R)t1;
         }
         else
         {
            t1 = (TEMPVAR)(temp);
         }
         _ret = (R)t1;
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
      }
      if(passNum==2)
      {
         String t = n.f0.tokenImage;
         n.f0.accept(this, argu);
         System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + t);
         _ret = (R)(new TEMPVAR(tempCounter, "int"));
         tempCounter++;
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
      }
      if(passNum==2)
      {
         n.f0.accept(this, argu);
         System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + 1);
         _ret = (R)(new TEMPVAR(tempCounter, "boolean"));
         tempCounter++;
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
      }
      if(passNum==2)
      {
         n.f0.accept(this, argu);
         System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + 0);
         _ret = (R)(new TEMPVAR(tempCounter, "boolean"));
         tempCounter++;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.tokenImage;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         return _ret;
      }
      if(passNum==2)
      {
         n.f0.accept(this, argu);
         TEMPVAR t1 = IdentifierToTEMP.get("this");
         _ret = (R)t1;
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      if(passNum==2)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         TEMPVAR t1 = (TEMPVAR) n.f3.accept(this, argu); //Size
         n.f4.accept(this, argu);
         int SizeOfList = tempCounter;
         int IncrementSize = tempCounter+1;
         int BitSize = tempCounter+2;
         int Allocate = tempCounter+3;
         System.out.println(MOVE + SPACE + TEMP + SPACE + SizeOfList + SPACE + TEMP + SPACE + t1.counter); //Size of list <- Size
         System.out.println(MOVE + SPACE + TEMP + SPACE + IncrementSize + SPACE + OP3 + SPACE + TEMP + SPACE + SizeOfList + SPACE + "1"); //Increment Size of list by 1
         System.out.println(MOVE + SPACE + TEMP + SPACE + BitSize + SPACE + OP5 + SPACE + TEMP + SPACE + IncrementSize + SPACE + "4"); //Multiply the Size of list by 4
         System.out.println(MOVE + SPACE + TEMP + SPACE + Allocate + SPACE + HALLOCATE + SPACE + TEMP + SPACE + BitSize); //Hallocated memory
         System.out.println(HSTORE + SPACE + TEMP + SPACE + Allocate + SPACE + 0 + SPACE + TEMP + SPACE + SizeOfList); //Store size in 0th address of array
         //Initialise all elements to 0;
         _ret = (R) (new TEMPVAR(Allocate, "int[]"));
         int StartLoop = labelCounter;
         int StartPointer = tempCounter+4;
         int UpperBound = tempCounter+5;
         int i = tempCounter+6;
         int exitLoop = labelCounter+1;
         int compare = tempCounter+7;
         tempCounter += 7;
         labelCounter += 2;
         System.out.println(MOVE + SPACE + TEMP + SPACE + StartPointer + SPACE + OP3 + SPACE + TEMP + SPACE + Allocate + SPACE + 4); //Add 4 in address
         System.out.println(MOVE + SPACE + TEMP + SPACE + UpperBound + SPACE + OP5 + SPACE + TEMP + SPACE + t1.counter + SPACE + 4); //Multiply the size by 4
         System.out.println(MOVE + SPACE + TEMP + SPACE + i + SPACE + 4); //Initialize i 
         System.out.println(LABEL + StartLoop); //Start the loop here
         System.out.println(MOVE + SPACE + TEMP + SPACE + compare + SPACE + OP1 + SPACE + TEMP + SPACE + i + SPACE + TEMP + SPACE + UpperBound); // i <= UpperBound
         System.out.println(CJUMP + SPACE + TEMP + SPACE + compare + SPACE + LABEL + exitLoop); //If false, endLoop
         System.out.println(HSTORE + SPACE + TEMP + SPACE + StartPointer + SPACE + 0 + SPACE + 0); //StartPonter[0] = 0
         System.out.println(MOVE + SPACE + TEMP + SPACE + i + SPACE + OP3 + SPACE + TEMP + SPACE + i + SPACE + 4); // i += 4
         System.out.println(MOVE + SPACE + TEMP + SPACE + StartPointer + SPACE + OP3 + SPACE + TEMP + SPACE + StartPointer + SPACE + 4); //StartPointer += 4
         System.out.println(JUMP + SPACE + LABEL + StartLoop);
         System.out.println(LABEL + exitLoop);
         System.out.println(NOOP);
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      if(passNum==2)
      {
         String id = null;
         n.f0.accept(this, argu);
         id = (String) n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         External.ClassDetail thisClassDetail = table.ST.getClass(id);
         //Make VTable
         //Edge Case = Class with no methods
         int vtablesz = 4*thisClassDetail.getAllMethod().size();
         int objstructsz = 4*(1+ thisClassDetail.getAllFields().size());
         int vtszTEMP = tempCounter;
         int VTable = tempCounter+1;
         tempCounter += 2;
         System.out.println(MOVE + SPACE + TEMP + SPACE + vtszTEMP + SPACE + vtablesz);
         if(vtablesz>0)
         {
            System.out.println(MOVE + SPACE + TEMP + SPACE + VTable + SPACE + HALLOCATE + SPACE + TEMP + SPACE + vtszTEMP);
            for(int i=0; i<vtablesz; i+=4)
            {
               // Move into a new temp
               // System.out.println(HSTORE + SPACE + TEMP + SPACE + (tempCounter+1) + SPACE + i + SPACE + thisClassDetail.ClassID + "_" + thisClassDetail.getAllMethod().get(i/4).MethodID);
               System.out.println(MOVE + SPACE + TEMP + SPACE + tempCounter + SPACE + thisClassDetail.getAllMethod().get(i/4).parentClass + "_" + thisClassDetail.getAllMethod().get(i/4).MethodID);
               System.out.println(HSTORE + SPACE + TEMP + SPACE + VTable + SPACE + i + SPACE + TEMP + SPACE + tempCounter);
               tempCounter++;
            }
         }
         else
         {
            System.out.println(MOVE + SPACE + TEMP + SPACE + VTable + SPACE + TEMP + SPACE + vtszTEMP);
         }
         //VTable is VTable
         int objStruct = tempCounter;
         int OStruct = tempCounter+1;
         int Zero = tempCounter+2;
         tempCounter += 3;
         System.out.println(MOVE + SPACE + TEMP + SPACE + objStruct + SPACE + objstructsz);
         System.out.println(MOVE + SPACE + TEMP + SPACE + OStruct + SPACE + HALLOCATE + SPACE + TEMP + SPACE + objStruct);
         //tempCounter+1 is ObjectStructure
         System.out.println(HSTORE + SPACE + TEMP + SPACE + OStruct + SPACE + 0 + SPACE + TEMP + SPACE + VTable);
         System.out.println(MOVE + SPACE + TEMP + SPACE + Zero + SPACE + 0);
         if(objstructsz>4)
         {
            for(int i=4; i<objstructsz; i+=4)
            {
               System.out.println(HSTORE + SPACE + TEMP + SPACE + OStruct + SPACE + i + SPACE + TEMP + SPACE + Zero);
            }
         }
         TEMPVAR t1 = new TEMPVAR(OStruct, id);
         _ret = (R)t1;
         External.ObjectStructure thisObjectStructure = table.new ObjectStructure(id);
         thisObjectStructure.AssignField(thisClassDetail.getAllFields());
         thisObjectStructure.AssignMethods(thisClassDetail.getAllMethod());
         TEMP2Object.put(t1, thisObjectStructure);
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      if(passNum==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      n.f0.accept(this, argu);
      TEMPVAR temp = (TEMPVAR) n.f1.accept(this, argu);
      int labelFalse = labelCounter;
      int labelNot = labelCounter+1;
      int FinalExp = tempCounter;
      tempCounter += 1;
      labelCounter += 2;
      System.out.println(CJUMP + SPACE + TEMP + SPACE + temp.counter + SPACE + "L" + labelFalse);
      System.out.println(MOVE + SPACE + TEMP + SPACE + FinalExp + SPACE + 0);
      System.out.println(JUMP + SPACE + "L"+labelNot);
      System.out.println("L"+labelFalse);
      System.out.println(NOOP);
      System.out.println(MOVE + SPACE + TEMP + SPACE + FinalExp + SPACE + 1);
      System.out.println(JUMP + SPACE + "L"+labelNot);
      System.out.println("L" + labelNot);
      System.out.println(NOOP);
      _ret = (R)(new TEMPVAR(FinalExp, "boolean"));
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(passNum==2)
      {
         _ret = (R) n.f1.accept(this, argu);
      }
      else
      {
         n.f1.accept(this, argu);
      }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}

